<experiment>
   <common>
      truncateLists= 1
      edWebServerVersion= v2020.9
      edWebVersion= v2022.01
      redirectURL= 
   </common>
   <userdata>
      <udglobal>
         Enabled= 1
      </udglobal>
      <udparams>
         Type= Integer
         Variable= subject
         Question= Subject number
         Min= 1
         Max= 10000
         DefaultValue= 
      </udparams>
   </userdata>
   <resultHeaders>

   </resultHeaders>
   <global>
int setsCompleted = 0; 

int itemInSet = 1;

String currentSet;

int seed = Tools.getRandomNumber(1, 3); 
int oefenrondeTeller = 1;
String currentItem; 

   </global>
   <init>
setGraphicsDriver(GraphicsDriver.OPENGL_NVG);

setFullScreen(false);
//setFullScreen(false);
setScreenWidth(1000);
setScreenHeight(0);   //0 -> keep aspect ratio, calculate height

setVertSync(VertSync.WAIT_1); //WAIT_0 = Paint immediately, WAIT_1 = Wait for Vertical Sync

SoundControl.setSoundDriver(SoundDriver.JAVA_SOUND); //Multiplatform, preferable for webexperiments
//SoundControl.setSoundDriver(SoundDriver.ASIO); //Only for Windows
//SoundControl.setSoundDriver(SoundDriver.PORTAUDIO); //Multiplatform, must be used in combination with setHostApi or setDeviceIndex
//SoundControl.setHostApi(SoundControl.HostApi.COREAUDIO); //For PortAudio --> Windows: WASAPI, ASIO, DIRECTX,  //Mac: COREAUDIO, //Linux: ALSA, JACK
//SoundControl.setDeviceIndex(10); //For PortAudio --> only needed for specific device within same host, see ED->Tools->Sound->Configure->PortAudio Device IDs

Debug.setDebugAction(Debug.DebugAction.USER); //NONE, USER, INTERNAL, USER_INTERNAL

   </init>
   <close>

   </close>
   <pages>
      <pageHtml>
         <pageParams>
            Name= consent
         </pageParams>
         <pageControls>
this.setDuration(-1);
this.setKeyboard("");
this.setMouseDownEnabled(true);
this.setMouseCanEndPage(false);
this.setValidClicksOnly(false);
this.setBackColor(Color.GRAY);
this.setTransparent(false);

/*
//flexBlockStart() can be used e.g. to create a left offset: all controls will be left aligned (in example: 50px)
this.flexBlockStart({id:'blockConsent1', flexDirection:'column', flexJustify:'space-between', margin:'10px 10px 10px 50px'}); //top right bottom left });

   this.spaceBlock({height:'20px'}); //gves space between controls in vertical direction, height in pixels.


   //possible control can go here


   this.spaceBlock({height:'20px'}); //gives space between controls in vertical direction, height in pixels.


   //possible control can go here


   //this.appendHTML("<b>Plain html code</b>"); //this command gives the option to add all kind of existings html commands

this.flexBlockEnd(); //flexBlock will end here

this.insertHTML(); //this will insert the temporary code to the page (needed!).

*/
   
//Take care that backtick is at begin/end -> `
//Remove text, copy/paste from text/Word document and use toString in menu to format it correctly (appending <br>)
//Use rightclick->Formatting->Remove linebreaks to put the checkboxes on a single line.
let text= `
<center><h1><b>Universiteit van Amsterdam</b></h1></center>

Informatiebrochure voor Kleurherkenning

Geachte participant / Beste deelnemer,

U gaat deelnemen aan het onderzoek kleurherkenning van de Universiteit van Amsterdam, faculteit der Geesteswetenschappen, uitgevoerd door Francijn Keur, Faust Stierman en Joran Paap onder begeleiding van Hernán Labbé Grunberg. Voordat het onderzoek begint, is het belangrijk dat u kennis neemt van de procedures die in dit onderzoek worden gevolgd. Leest u deze brochure daarom zorgvuldig door.

<b>Doel van het onderzoek</b>
Perceptie is iets waar al redelijk veel onderzoek naar gedaan is. Verschillende aspecten hebben invloed op de snelheid en accuraatheid waarmee je iets waarneemt. Dit onderzoek richt zich specifiek op onze perceptie van kleuren. Eerder onderzoek heeft al aangetoond dat je bijvoorbeeld sneller een kleur categoriseert wanneer je hier een woord voor hebt, in tegenstelling tot wanneer je er geen woord voor hebt. Met dit onderzoek hopen wij meer te leren over kleurperceptie en welke kenmerken mogelijk invloed hebben op de snelheid van kleurcategorisatie.

<b>Wie kan er aan dit onderzoek meedoen</b>
Voor dit onderzoek worden volwassen uitgenodigd die niet kleurenblind zijn. Wij vragen u voorafgaand aan het onderzoek ook naar uw gezichtsvermogen. Gezien de aard van het onderzoek is het van belang dat u goed kunt zien. Het dragen van een bril is wel mogelijk. 

<b>Instructie en procedure</b>
U krijgt per trial drie items te zien op uw scherm. Er staat 1 item bovenaan het scherm en onderaan het scherm staan de 2 andere items. Van u wordt verwacht dat u, door middel van de knoppen op uw toetsenbord én zo snel mogelijk, een van de onderste items selecteert die qua kleur het meest lijkt op de kleur van het bovenste item. Het experiment zal beginnen met een aantal vragen naar bijvoorbeeld uw zicht, leeftijd en gender en daarna komt een oefentrial. Na de oefentrial zal het daadwerkelijke experiment van start gaan. In totaal bestaat het experiment uit drie blokken die elk bestaan uit 8 trials. Na de 24 trials ziet u een eindscherm en kan u de pagina sluiten.

<b>Vrijwilligheid</b>
U doet vrijwillig mee aan dit onderzoek. U kunt dan ook op elk moment gedurende het onderzoek uw deelname stopzetten. Dit zal geen gevolgen voor u hebben en u bent in geen geval verplicht de hierboven beschreven procedures af te ronden. Tevens kunt u tot 8 dagen na het onderzoek uw deelname alsnog intrekken. Als u uw deelname staakt of toestemming intrekt, worden alle tot dan toe verzamelde gegevens definitief verwijderd.

<b>Ongemak, Risico’s en Verzekering </b>
De risico’s van deelname aan dit onderzoek zijn niet groter dan die in dagelijkse situaties thuis. Uit ervaring met voorgaande, vergelijkbare onderzoeken is gebleken dat er van enig ongemak voor de deelnemers niet of nauwelijks sprake is. Bij elk onderzoek van de Universiteit van Amsterdam geldt een standaard aansprakelijkheidsverzekering.

<b>Vertrouwelijkheid van de onderzoeksgegevens</b>
De gegevens die in dit onderzoek worden verzameld, zullen door de onderzoekers alleen worden gebruikt voor nadere analyse en voor publicatie in wetenschappelijke tijdschriften. Hierbij wordt geen gebruik gemaakt van uw persoonlijke gegevens en uw anonimiteit blijft onder alle omstandigheden gewaarborgd.
	De verzamelde onderzoeksgegevens zullen gecodeerd opgeslagen worden, apart van uw persoonlijke gegevens. Alleen medewerkers aan het onderzoek hebben toegang tot deze gegevens en de codering. 

<b>Vergoeding</b>
U ontvangt voor uw deelname geen vergoeding. Als u daar prijs op stelt, ontvangt u te zijner tijd een samenvatting met de algemene resultaten van het onderzoek. 

<b>Nadere inlichtingen</b>
Als u nog verdere informatie wilt over dit onderzoek, dan kunt u zich wenden tot 
Francijn Keur, Faust Stierman of Joran Paap (e-mail: francijn.keur@student.uva.nl, faust.stierman@student.uva.nl, joran.paap@student.uva.nl). 
Met eventuele klachten over dit onderzoek kunt u zich wenden tot de secretaris van de Commissie Ethiek van de Faculteit Geesteswetenschappen van de Universiteit van Amsterdam; email: commissie-ethiek-fgw@uva.nl ; telefoon: +31 20 - 525 3054; Kloveniersburgwal 48, 1012 CX Amsterdam.


<b>Toestemmingsformulier </b>

‘Ik verklaar hierbij op voor mij duidelijke wijze te zijn ingelicht over het onderzoek kleurherkenning van de Universiteit van Amsterdam, Faculteit der Geesteswetenschappen uitgevoerd door Francijn Keur, Faust Stierman en  Joran Paap onder begeleiding van Hernán Labbé Grunberg, zoals uiteengezet in de informatiebrochure. Mijn vragen zijn naar tevredenheid beantwoord. 

Ik stem geheel vrijwillig in met deelname aan dit onderzoek. Ik behoud daarbij het recht deze instemming weer in te trekken zonder dat ik daarvoor een reden hoef op te geven. Ik besef dat ik op elk moment mag stoppen met het onderzoek en tot 8 dagen na het onderzoek mijn deelname alsnog kan intrekken. In het geval dat ik mijn deelname staak of toestemming intrek zullen alle tot dan toe verzamelde gegevens definitief worden verwijderd. 

Indien mijn onderzoeksresultaten gebruikt zullen worden in wetenschappelijke publicaties, dan wel op een andere manier openbaar worden gemaakt, zal dit volledig geanonimiseerd gebeuren. Mijn persoonsgegevens zullen niet door derden worden ingezien zonder mijn uitdrukkelijke toestemming.

Als ik nog verdere informatie over het onderzoek zou willen krijgen, nu of in de toekomst, kan ik me wenden tot Francijn Keur, Faust Stierman of Joran Paap (e-mail: francijn.keur@student.uva.nl, faust.stierman@student.uva.nl, joran.paap@student.uva.nl). 

Met eventuele klachten over dit onderzoek kan ik me wenden tot de secretaris van de Commissie Ethiek van de Faculteit Geesteswetenschappen van de Universiteit van Amsterdam; email: commissie-ethiek-fgw@uva.nl; telefoon: +31 20 - 525 3054; Kloveniersburgwal 48, 1012 CX Amsterdam.’

`;

this.centerBlockStart();
this.addTextBlockWithConsent(
{
     editable:false,
     consentButtonID:'consent', consentButtonText:'Accept', consentButtonColor:'Green', consentButtonBackColor:'White', consentButtonFontSize:24,
     consentButtonWidth:'100px', consentButtonHeight:'30px', consentButtonMargin:'20px 0px 0px 0px;',
     declineButtonID:'decline', declineButtonText:'Decline', declineButtonColor:'Red', declineButtonBackColor:'White', declineButtonFontSize:24,
     declineButtonWidth:'100px', declineButtonHeight:'30px', declineButtonMargin:'20px 100px 0px 0px;',

     controlMargin:this.cY(0.1).toString() + 'px auto 0px auto', id:'textInputConsent1',
     controlText: text, controlWidth:this.cX(0.3) + 'px', controlHeight:this.cY(0.7)+'px', controlForeColor:'Black', controlBackColor:'WhiteSmoke',
     controlHorizAlign:'left', controlPadding:'10px 10px 10px 10px'
});

this.centerBlockEnd();
this.insertHTML();

<Finish>
   if (this.getButtonPressed()=== 'decline')
   {
        this.setUserData('declined', 'true');
        this.saveResults();
        this.experiment.save();
   }
   else
   {
   if (document.getElementById("adult").checked &&
        document.getElementById("native").checked &&
        document.getElementById("education").checked)
           this.setStatus(Page.Status.ENDED);
        else throw "<br><br>Not all checkboxes where populated, participant can't take part, so experiment will end.";
   }
</Finish>
         </pageControls>
      </pageHtml>
      <list>
         <listParams>
            Name= vragen
this.setRandomization(UserList.Randomization.SEQUENTIAL); //RANDOM, SEQUENTIAL
this.loadList("lists/vragen.txt");
//this.setListStatus("TEST1");


         </listParams>
         <page>
            <pageParams>
               Name= toonVragen
            </pageParams>
            <pageControls>
this.setDuration(-1);
this.setKeyboard("{SPACE}");
this.setKeyboardCanEndPage(true);
this.setMouseDownEnabled(true);
this.setMouseCanEndPage(false);
this.setValidClicksOnly(true);
this.setBackColor(Color.GRAY);
this.setTransparent(false);


//this.setKeyboardCanEndPage(false);
//this.setMouseDownEnabled(true);
//this.setMouseCanEndPage(true);
//this.setValidClicksOnly(true);
multiSelection1 = new MultiSelectionControl("multiSelection1");
multiSelection1.setListParent(this.getParent());
multiSelection1.setPageParent(this);
multiSelection1.setType("[Type]");
multiSelection1.setCount("[Count]");
multiSelection1.setFeedback("[Feedback]");

//Question, used for all subcontrols
multiSelection1.setQuestion("[Question]");
multiSelection1.setQuestionFont("Roboto-Regular", Font.BOLD, 36);
multiSelection1.setQuestionForeColor(Color.WHITE);
//multiSelection1.setQuestionBackColor(Color.LIGHT_GRAY);
multiSelection1.setQuestionBorderWidth(0);
multiSelection1.setQuestionBorderColor(Color.BLACK);
multiSelection1.setQuestionOffsetY(20);
multiSelection1.setQuestionDrawBackColorNarrow(true);
multiSelection1.setQuestionBackColorMarginHorizVert(5, 5);

//Selection -> radiobuttons/checkboxes/other (text input)
multiSelection1.selection_setX(0.1); multiSelection1.selection_setXAlign(BaseControl.XAlign.LEFT);
multiSelection1.selection_setY(0.2); multiSelection1.selection_setYAlign(BaseControl.YAlign.TOP);
multiSelection1.setWidth(0.3);
multiSelection1.selection_setDirection(SelectionControl.Direction.VERTICAL);
multiSelection1.selection_setHorizAlign(TextControl.HorizAlign.LEFT);
multiSelection1.selection_setAnswers("Answer"); //Main header of answers, e.g. Answer -> Answer1, Answer2, ...
multiSelection1.selection_setAnswersFont("Roboto-Regular", Font.PLAIN, 24);
multiSelection1.selection_setAnswersForeColor(Color.WHITE);
multiSelection1.selection_setAnswersOffsetXBefore(20); //space before selection control
multiSelection1.selection_setAnswersOffsetXAfter(30); //space between selection and answer control
multiSelection1.selection_setAnswersOffsetX(150); //space between answers when Directon = 'Horizontal'
multiSelection1.selection_setAnswersOffsetY(30); //line space between answers when Direction = 'Vertical'
multiSelection1.selection_setSelRadius(12);
multiSelection1.selection_setSelBackColor(Color.WHITE);
multiSelection1.selection_setSelLineWidth(1);
multiSelection1.selection_setSelLineColor(Color.BLACK);
multiSelection1.selection_setSelectedBackColor(Color.BLACK);

//SetOtherxxx -> Last item will be input box
multiSelection1.selection_setOtherText("");
multiSelection1.selection_setOtherOffsetX(0); //set 0 for x-Alignment with other answers
multiSelection1.selection_setOtherOffsetY(15); 
multiSelection1.selection_setOtherWidth(0.25);
multiSelection1.selection_setOtherFont("Roboto-Regular", Font.PLAIN, 24);
multiSelection1.selection_setOtherForeColor(Color.WHITE);
multiSelection1.selection_setOtherBackColor(Color.BLUE);
multiSelection1.selection_setOtherBorderWidth(1);
multiSelection1.selection_setOtherBorderColor(Color.BLACK);
multiSelection1.selection_setOtherBackColorMarginHorizVert(1, 1);

//Button will confirm selection
multiSelection1.button_setText("[SubmitText]");
multiSelection1.button_setX(0.7); multiSelection1.button_setXAlign(BaseControl.XAlign.CENTER);
multiSelection1.button_setY(0.8); multiSelection1.button_setYAlign(BaseControl.YAlign.CENTER);
multiSelection1.button_setWidth(100);
multiSelection1.button_setHeight(75);
multiSelection1.button_setForeColor(Color.BLACK);
multiSelection1.button_setBackColor(Color.LIGHT_GRAY);
multiSelection1.button_setSelectedBackColor(Color.BLUE);
multiSelection1.button_setFont("Roboto-Regular", Font.PLAIN, 24);

//Dropdown list
multiSelection1.list_setList("Answer");
multiSelection1.list_setX(0.1); multiSelection1.list_setXAlign(BaseControl.XAlign.LEFT);
multiSelection1.list_setY(0.2); multiSelection1.list_setYAlign(BaseControl.YAlign.TOP);
multiSelection1.list_setWidth(0.75);
multiSelection1.list_setListWidth(0.35);
multiSelection1.list_setListFont("Roboto-Regular", Font.PLAIN, 18);
multiSelection1.list_setListForeColor(Color.BLACK);
multiSelection1.list_setListBackColor(Color.LIGHT_GRAY);
multiSelection1.list_setListBorderWidth(1);
multiSelection1.list_setListBorderColor(Color.BLACK);
multiSelection1.list_setSelectionBackColor(Color.GRAY);
multiSelection1.list_setSelectedBackColor(Color.BLUE);

//Rating
multiSelection1.rating_setX(0.1); multiSelection1.rating_setXAlign(BaseControl.XAlign.LEFT);
multiSelection1.rating_setY(0.2); multiSelection1.rating_setYAlign(BaseControl.YAlign.TOP);
multiSelection1.rating_setQuestionAlign(BaseControl.QuestionAlign.LEFT);
multiSelection1.rating_setGeometry(RatingControl.Geometry.CIRCLE); //SQUARE, CIRCLE
multiSelection1.rating_setRatingLeft("Not sure");
multiSelection1.rating_setRatingRight("Very sure");
multiSelection1.rating_setRatingFont("Roboto-Regular", Font.PLAIN, 24);
multiSelection1.rating_setRatingForeColor(Color.BLACK);
multiSelection1.rating_setRatingOffsetY(50);
multiSelection1.rating_setAnswers("Answer"); //no spaces
multiSelection1.rating_setAnswersFont("Roboto-Regular", Font.PLAIN, 18);
multiSelection1.rating_setAnswersForeColor(Color.BLACK);
multiSelection1.rating_setAnswersOffsetX(50); //space between answers
multiSelection1.rating_setSelRadius(12);
multiSelection1.rating_setSelBackColor(Color.BLUE);
multiSelection1.rating_setSelLineWidth(1);
multiSelection1.rating_setSelLineColor(Color.BLACK);
multiSelection1.rating_setSelectedBackColor(Color.BLACK);

//Slider
multiSelection1.slider_setX(0.1); multiSelection1.slider_setXAlign(BaseControl.XAlign.LEFT);
multiSelection1.slider_setY(0.3); multiSelection1.slider_setYAlign(BaseControl.YAlign.TOP);
multiSelection1.slider_setWidth(0.5);
multiSelection1.slider_setHeight(40);
multiSelection1.slider_setQuestionAlign(BaseControl.QuestionAlign.LEFT);
multiSelection1.slider_setBackColor(Color.DARK_GRAY);
multiSelection1.slider_setBeforeSelectColor(Color.WHITE);
multiSelection1.slider_setKnobColor(Color.BLUE);
multiSelection1.slider_setKnobLineColor(Color.BLACK);
multiSelection1.slider_setKnobLineWidth(0);
multiSelection1.slider_setLabelShow(true);
multiSelection1.slider_setLabelWidth(100);
multiSelection1.slider_setLabelHeight(30);
multiSelection1.slider_setLabelColor(Color.BLUE);
multiSelection1.slider_setLabelFont("Roboto-Regular", Font.PLAIN, 14);
multiSelection1.slider_setLabelOffset(20);
multiSelection1.slider_setMinValue("[Answer1]");
multiSelection1.slider_setMaxValue("[Answer2]");
multiSelection1.slider_setPos("[Answer3]");
multiSelection1.slider_setUseValidation(true);

//Input textbox
multiSelection1.textInput_setText("");
multiSelection1.textInput_setX(0.1); multiSelection1.textInput_setXAlign(BaseControl.XAlign.LEFT);
multiSelection1.textInput_setY(0.3); multiSelection1.textInput_setYAlign(BaseControl.YAlign.TOP);
multiSelection1.textInput_setQuestionAlign(BaseControl.QuestionAlign.LEFT);
multiSelection1.textInput_setWidth(0.35);
multiSelection1.textInput_setQuestionOffsetY(5);
multiSelection1.textInput_setForeColor(Color.WHITE);
multiSelection1.textInput_setBackColor(Color.BLUE);
multiSelection1.textInput_setFont("Roboto-Regular", Font.PLAIN, 24);
multiSelection1.textInput_setBorderWidth(1);
multiSelection1.textInput_setBorderColor(Color.BLACK);
multiSelection1.textInput_setEndKey("");
multiSelection1.textInput_setBackColorMarginHorizVert(1, 1);

this.addControl(multiSelection1);

     
<Frame>
   	this.multiSelection1.frame();
</Frame>

<Finish>
     this.multiSelection1.finish();
</Finish>
            </pageControls>
         </page>
      </list>
      <page>
         <pageParams>
            Name= uitleg
         </pageParams>
         <pageControls>
this.setDuration(-1);
this.setKeyboard("{SPACE}");
this.setKeyboardCanEndPage(true);
this.setMouseDownEnabled(false);
this.setMouseCanEndPage(true);
this.setValidClicksOnly(true);
this.setBackColor(Color.GRAY);
this.setTransparent(false);

PictureControl picture5= new PictureControl("picture5");
picture5.setPicture("pics/uitleg.png");
picture5.setX(0.5);
picture5.setY(0.5);
picture5.setWidth(1);
picture5.setHeight(1);
//picture5.setRadius(15);
picture5.setXAlign(BaseControl.XAlign.CENTER); //LEFT, CENTER, RIGHT
picture5.setYAlign(BaseControl.YAlign.CENTER); //TOP, CENTER, BOTTOM
picture5.setScale(PictureControl.Scale.NONE);  //NONE, STRETCH, STRETCH_ASPECTRATIO, WIDTH, HEIGHT
picture5.setBorderWidth(0);
picture5.setBorderColor(Color.BLUE);
picture5.setZOrder(10);
picture5.setValidClick(false);
this.addControl(picture5);




         </pageControls>
      </page>
      <list>
         <listParams>
            Name= voorbeelden
this.setRandomization(UserList.Randomization.SEQUENTIAL); //RANDOM, SEQUENTIAL
this.loadList("lists/voorbeelden.tsv");
//this.setListStatus("TEST1");


         </listParams>
         <page>
            <pageParams>
               Name= toonVoorbeeld
            </pageParams>
            <pageControls>
this.setDuration(-1);
this.setKeyboard("ad{RIGHT}{LEFT}");
this.setKeyboardCanEndPage(true);
this.setMouseDownEnabled(false);
this.setMouseCanEndPage(false);
this.setValidClicksOnly(true);
this.setBackColor(Color.GRAY);
this.setTransparent(false);

PictureControl picture2= new PictureControl("picture2");
picture2.setPicture("pics/[afbeelding].bmp");
picture2.setX(0.5);
picture2.setY(0.5);
picture2.setWidth(0.8);
picture2.setHeight(0.8);
//picture2.setRadius(15);
picture2.setXAlign(BaseControl.XAlign.CENTER); //LEFT, CENTER, RIGHT
picture2.setYAlign(BaseControl.YAlign.CENTER); //TOP, CENTER, BOTTOM
picture2.setScale(PictureControl.Scale.STRETCH_ASPECTRATIO);  //NONE, STRETCH, STRETCH_ASPECTRATIO, WIDTH, HEIGHT
picture2.setBorderWidth(0);
picture2.setBorderColor(Color.BLUE);
picture2.setZOrder(10);
picture2.setValidClick(false);
this.addControl(picture2);

TextControl text9= new TextControl("text9");
//text9.setText("");
//text9.setText(this.globals.allText.get("instr1Text"));
text9.setText(String.join("\n",
"Voorbeeld " + String.format("%d",this.globals.oefenrondeTeller),
"Match deze kleur met rechts of links"
));
text9.setX(0.5);
text9.setY(0.05);
text9.setWidth(0.5);
text9.setHeight(0.5);
text9.setXAlign(BaseControl.XAlign.CENTER); //LEFT, CENTER, RIGHT
text9.setYAlign(BaseControl.YAlign.CENTER); //TOP, CENTER, BOTTOM
text9.setFont("Roboto-Regular", Font.BOLD, 36); //PLAIN, BOLD, ITALIC
text9.setForeColor(Color.WHITE);
//text9.setBackColor(Color.WHITE);
text9.setHorizAlign(TextControl.HorizAlign.CENTER); //LEFT, CENTER, RIGHT
text9.setVertAlign(TextControl.VertAlign.CENTER); //TOP, CENTER, BOTTOM
text9.setBorderWidth(0);
text9.setBorderColor(Color.BLACK);
text9.setDrawBackColorNarrow(false);
text9.setBackColorMarginHorizVert(0, 0);
text9.setValidClick(false);
this.addControl(text9);

this.globals.oefenrondeTeller++;




            </pageControls>
         </page>
      </list>
      <page>
         <pageParams>
            Name= startTrail
         </pageParams>
         <pageControls>
this.setDuration(-1);
this.setKeyboard("{SPACE}");
this.setKeyboardCanEndPage(true);
this.setMouseDownEnabled(false);
this.setMouseCanEndPage(true);
this.setValidClicksOnly(true);
this.setBackColor(Color.GRAY);
this.setTransparent(false);

TextControl text12= new TextControl("text12");
//text12.setText("");
//text12.setText(this.globals.allText.get("instr1Text"));
text12.setText(String.join("\n",
"Dat waren de oefenvragen",
"Druk op Spatie om door te gaan naar de test"
));
text12.setX(0.5);
text12.setY(0.5);
text12.setWidth(0.5);
text12.setHeight(0.5);
text12.setXAlign(BaseControl.XAlign.CENTER); //LEFT, CENTER, RIGHT
text12.setYAlign(BaseControl.YAlign.CENTER); //TOP, CENTER, BOTTOM
text12.setFont("Roboto-Regular", Font.BOLD, 36); //PLAIN, BOLD, ITALIC
text12.setForeColor(Color.BLACK);
//text12.setBackColor(Color.WHITE);
text12.setHorizAlign(TextControl.HorizAlign.CENTER); //LEFT, CENTER, RIGHT
text12.setVertAlign(TextControl.VertAlign.CENTER); //TOP, CENTER, BOTTOM
text12.setBorderWidth(0);
text12.setBorderColor(Color.BLACK);
text12.setDrawBackColorNarrow(false);
text12.setBackColorMarginHorizVert(0, 0);
text12.setValidClick(false);
this.addControl(text12);


         </pageControls>
      </page>
      <code>
         <codeParams>
            Name= preTrail
         </codeParams>
         <codeText>


if (Tools.modEquals(this.globals.seed + this.globals.setsCompleted, 3, 0)){
	this.globals.currentItem = "controle" + String.format("%d", this.globals.itemInSet);
	
}

else if (Tools.modEquals(this.globals.seed + this.globals.setsCompleted, 3, 1)){
	this.globals.currentItem = "abstract" + String.format("%d", this.globals.itemInSet);
	
}

else if (Tools.modEquals(this.globals.seed + this.globals.setsCompleted, 3, 2)){
	this.globals.currentItem = "iconisch" + String.format("%d", this.globals.itemInSet);
	
}

         </codeText>
      </code>
      <page>
         <pageParams>
            Name= fixatieKruis
         </pageParams>
         <pageControls>
this.setDuration(500);
this.setKeyboard("{SPACE}");
this.setKeyboardCanEndPage(false);
this.setMouseDownEnabled(false);
this.setMouseCanEndPage(false);
this.setValidClicksOnly(true);
this.setBackColor(Color.GRAY);
this.setTransparent(false);
//
//PictureControl picture4= new PictureControl("picture4");
//picture4.setPicture("pics/fixatieKruis.bmp");
//picture4.setX(0.5);
//picture4.setY(0.5);
//picture4.setWidth(0.8);
//picture4.setHeight(0.8);
////picture4.setRadius(15);
//picture4.setXAlign(BaseControl.XAlign.CENTER); //LEFT, CENTER, RIGHT
//picture4.setYAlign(BaseControl.YAlign.CENTER); //TOP, CENTER, BOTTOM
//picture4.setScale(PictureControl.Scale.STRETCH_ASPECTRATIO);  //NONE, STRETCH, STRETCH_ASPECTRATIO, WIDTH, HEIGHT
//picture4.setBorderWidth(0);
//picture4.setBorderColor(Color.BLUE);
//picture4.setZOrder(10);
//picture4.setValidClick(false);
//this.addControl(picture4);


         </pageControls>
      </page>
      <page>
         <pageParams>
            Name= testItemN
         </pageParams>
         <pageControls>
this.setDuration(-1);
this.setKeyboard("ad{RIGHT}{LEFT}");
this.setKeyboardCanEndPage(true);
this.setMouseDownEnabled(false);
this.setMouseCanEndPage(true);
this.setValidClicksOnly(true);
this.setBackColor(Color.GRAY);
this.setTransparent(false);

PictureControl picture1= new PictureControl("picture1");
picture1.setPicture("pics/" + this.globals.currentItem + ".bmp");
picture1.setX(0.5);
picture1.setY(0.5);
picture1.setWidth(0.8);
picture1.setHeight(0.8);
//picture1.setRadius(15);
picture1.setXAlign(BaseControl.XAlign.CENTER); //LEFT, CENTER, RIGHT
picture1.setYAlign(BaseControl.YAlign.CENTER); //TOP, CENTER, BOTTOM
picture1.setScale(PictureControl.Scale.STRETCH_ASPECTRATIO);  //NONE, STRETCH, STRETCH_ASPECTRATIO, WIDTH, HEIGHT
picture1.setBorderWidth(0);
picture1.setBorderColor(Color.BLUE);
picture1.setZOrder(10);
picture1.setValidClick(false);
this.addControl(picture1);



         </pageControls>
      </page>
      <code>
         <codeParams>
            Name= code2
         </codeParams>
         <codeText>
this.globals.itemInSet += 1; 

if(Tools.equals(this.globals.itemInSet, 8))
{
	//If a set has been completed 
	this.globals.setsCompleted += 1;
	this.globals.itemInSet = 1; 
	Debug.writeLine(Tools.modEquals(this.globals.setsCompleted, 3, 0));
	if(Tools.modEquals(this.globals.setsCompleted, 3, 0))
	{
		Debug.writeLine("here");
		// If three trails completed: jump to end 
		this.jumpTo("einde");
		this.jumpToEndTrial();
	}
	else{
		this.jumpTo("preTrail");
	}
}

//Jump to next item
else{
	this.jumpTo("preTrail");
}
         </codeText>
      </code>
      <page>
         <pageParams>
            Name= einde
         </pageParams>
         <pageControls>
this.setDuration(-1);
this.setKeyboard("{SPACE}");
this.setKeyboardCanEndPage(true);
this.setMouseDownEnabled(false);
this.setMouseCanEndPage(true);
this.setValidClicksOnly(true);
this.setBackColor(Color.GRAY);
this.setTransparent(false);

TextControl text8= new TextControl("text8");
//text8.setText("");
//text8.setText(this.globals.allText.get("instr1Text"));

text8.setText(String.join("\n",
"Namens Faust, Francijn en Joran", 
"",
"Bedankt voor het meedoen aan ons experiment", 
"", 
"voor vragen of op merkingen kan je mailen naar:", 
"",
"Faust.stierman@student.uva.nl", 
"",
"Francijn.Keur@student.uva.nl", 
"", 
"en", 
"Joran.Paap@student.uva.nl"
));
text8.setX(0.5);
text8.setY(0.5);
text8.setWidth(0.5);
text8.setHeight(0.5);
text8.setXAlign(BaseControl.XAlign.CENTER); //LEFT, CENTER, RIGHT
text8.setYAlign(BaseControl.YAlign.CENTER); //TOP, CENTER, BOTTOM
text8.setFont("Roboto-Regular", Font.PLAIN, 36); //PLAIN, BOLD, ITALIC
text8.setForeColor(Color.WHITE);
//text8.setBackColor(Color.WHITE);
text8.setHorizAlign(TextControl.HorizAlign.CENTER); //LEFT, CENTER, RIGHT
text8.setVertAlign(TextControl.VertAlign.CENTER); //TOP, CENTER, BOTTOM
text8.setBorderWidth(0);
text8.setBorderColor(Color.BLACK);
text8.setDrawBackColorNarrow(false);
text8.setBackColorMarginHorizVert(0, 0);
text8.setValidClick(false);
this.addControl(text8);


         </pageControls>
      </page>
   </pages>
</experiment>
